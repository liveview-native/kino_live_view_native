# KinoLiveViewNative

```elixir
Mix.install(
  [
    # {:kino_live_view_native, github: "liveview-native/kino_live_view_native"}
    {:kino_live_view_native, path: "../kino_live_view_native"}
  ],
  config: [
    # This must be a compile time configuration for :live_view_native.
    live_view_native: [plugins: [LiveViewNative.SwiftUI]],
    live_view_native_style_sheet: [parsers: [swiftui: LiveViewNative.SwiftUI.RulesParser]]
  ],
  force: true
)

KinoLiveViewNative.start([])
```

## Quickstart

To use the KinoLiveViewNative project we need to install it. You can include the following in your Notebook dependencies and setup section of Livebook.

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install(
  [
    {:kino_live_view_native, github: "liveview-native/kino_live_view_native"}
  ],
  config: [
    # This must be a compile time configuration for :live_view_native.
    live_view_native: [plugins: [LiveViewNative.SwiftUI]],
    live_view_native_style_sheet: [parsers: [swiftui: LiveViewNative.SwiftUI.RulesParser]]
  ]
)

KinoLiveViewNative.start([])
```

We need to start the server. This could be hidden in in notebook dependencies to make the experience more streamlined for your reader.

<!-- livebook:{"force_markdown":true} -->

```elixir
KinoLiveViewNative.start()
```

You may optionally configure the `port` to start the server on. By default, the server starts on port `4000`.

<!-- livebook:{"force_markdown":true} -->

```elixir
KinoLiveViewNative.start(port: 5001)
```

Let's create a basic LiveView that will be available at http://localhost:4000.

<!-- livebook:{"attrs":"e30","chunks":[[0,109],[111,306],[419,45],[466,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.ExampleLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{format: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>Hello from LiveView Native!</Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p>Hello from LiveView!</p>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

`KinoLiveViewNative` uses automatic code reloading, so anytime you change this file or evaluate one of the `LiveView Native` smart cells, the server will hot reload the page.

Evaluate the cell below that gives our Hello World app some colored text to see the app live reload.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib3RSZWxvYWRFeGFtcGxlTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtmb3JtYXQ6IDpzd2lmdHVpfSA9IGFzc2lnbnMpIGRvXG4gICAgflNXSUZUVUlcIlwiXCJcbiAgICA8VGV4dD5cbiAgICAgIEhlbGxvIGFnYWluIGZyb20gTGl2ZVZpZXcgTmF0aXZlIVxuICAgIDwvVGV4dD5cbiAgICBcIlwiXCJcbiAgZW5kXG5cbiAgZGVmIHJlbmRlcihhc3NpZ25zKSBkb1xuICAgIH5IXCJcIlwiXG4gICAgPHA+SGVsbG8gYWdhaW4gZnJvbSBMaXZlVmlldyE8L3A+XG4gICAgXCJcIlwiXG4gIGVuZFxuZW5kXG4iLCJwYXRoIjoiLyJ9","chunks":[[0,109],[111,340],[453,45],[500,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HotReloadExampleLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{format: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>
      Hello again from LiveView Native!
    </Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p>Hello again from LiveView!</p>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

## Dealing with path variables

KinoLiveViewNative lets you set path variables using the `:path_variable` syntax you would normally use in a Phoenix router. Here's an example that uses the path variable to display a name in the hello world application.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5QYXRoVmFyaWFibGVFeGFtcGxlTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiBtb3VudCgle1wibmFtZVwiID0+IG5hbWV9LCBfc2Vzc2lvbiwgc29ja2V0KSBkb1xuICAgIHs6b2ssIGFzc2lnbihzb2NrZXQsIDpuYW1lLCBuYW1lKX1cbiAgZW5kXG5cbiAgQGltcGwgdHJ1ZVxuICBkZWYgcmVuZGVyKCV7Zm9ybWF0OiA6c3dpZnR1aX0gPSBhc3NpZ25zKSBkb1xuICAgIH5TV0lGVFVJXCJcIlwiXG4gICAgPFRleHQ+SGkgdGhlcmUsIEknbSA8JT0gQG5hbWUgJT48L1RleHQ+XG4gICAgXCJcIlwiXG4gIGVuZFxuXG4gIGRlZiByZW5kZXIoYXNzaWducykgZG9cbiAgICB+SFwiXCJcIlxuICAgIDxwIHN0eWxlPVwiY29sb3I6IHB1cnBsZVwiPkhpIHRoZXJlLCBJJ20gPCU9IEBuYW1lICU+PC9wPlxuICAgIFwiXCJcIlxuICBlbmRcbmVuZFxuIiwicGF0aCI6Ii9oZWxsby86bmFtZSJ9","chunks":[[0,109],[111,457],[570,56],[628,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.PathVariableExampleLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def mount(%{"name" => name}, _session, socket) do
    {:ok, assign(socket, :name, name)}
  end

  @impl true
  def render(%{format: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>Hi there, I'm <%= @name %></Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p style="color: purple">Hi there, I'm <%= @name %></p>
    """
  end
end
|> KinoLiveViewNative.register("/hello/:name", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

Go to http://localhost:4000/hello/your_name. Replace `your_name` with your name and see the page display your name!

## Image

The URL for the LiveView Native The SwiftUI `Image` element is evaluated relative to the LiveView's host URL. We have provided an example image at http://localhost:4000/images/logo.png for you to use in any examples.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5JbWFnZUV4YW1wbGVMaXZlIGRvXG4gIHVzZSBQaG9lbml4LkxpdmVWaWV3XG4gIHVzZSBMaXZlVmlld05hdGl2ZS5MaXZlVmlld1xuXG4gIEBpbXBsIHRydWVcbiAgZGVmIHJlbmRlcigle2Zvcm1hdDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxBc3luY0ltYWdlIHVybD1cIi4vaW1hZ2VzL2xvZ28ucG5nXCIvPlxuICAgIFwiXCJcIlxuICBlbmRcblxuICBkZWYgcmVuZGVyKGFzc2lnbnMpIGRvXG4gICAgfkhcIlwiXCJcbiAgICA8aW1nIHNyYz1cIi4vaW1hZ2VzL2xvZ28ucG5nXCIvPlxuICAgIFwiXCJcIlxuICBlbmRcbmVuZCIsInBhdGgiOiIvIn0","chunks":[[0,109],[111,311],[424,45],[471,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.ImageExampleLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{format: :swiftui} = assigns) do
    ~SWIFTUI"""
    <AsyncImage url="./images/logo.png"/>
    """
  end

  def render(assigns) do
    ~H"""
    <img src="./images/logo.png"/>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

This is the same as providing the full host url. The following example will also work.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5GdWxsVVJMSW1hZ2VFeGFtcGxlTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtwbGF0Zm9ybV9pZDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxBc3luY0ltYWdlIHVybD1cImh0dHA6Ly9sb2NhbGhvc3Q6NDAwMC9pbWFnZXMvbG9nby5wbmdcIi8+XG4gICAgXCJcIlwiXG4gIGVuZFxuXG4gIGRlZiByZW5kZXIoYXNzaWducykgZG9cbiAgICB+SFwiXCJcIlxuICAgIDxpbWcgc3JjPVwiLi9pbWFnZXMvbG9nby5wbmdcIi8+XG4gICAgXCJcIlwiXG4gIGVuZFxuZW5kIiwicGF0aCI6Ii8ifQ","chunks":[[0,109],[111,343],[456,45],[503,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.FullURLImageExampleLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <AsyncImage url="http://localhost:4000/images/logo.png"/>
    """
  end

  def render(assigns) do
    ~H"""
    <img src="./images/logo.png"/>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

However, it's generally better to use the relative path without the host name because it will work in both development and production.
