# KinoLiveViewNative

```elixir
Mix.install(
  [
    # {:kino_live_view_native, github: "liveview-native/kino_live_view_native"}
    {:kino_live_view_native, path: "../kino_live_view_native"}
  ],
  config: [
    # This must be a compile time configuration for :live_view_native.
    live_view_native: [plugins: [LiveViewNative.SwiftUI]],
    live_view_native_style_sheet: [parsers: [swiftui: LiveViewNative.SwiftUI.RulesParser]]
  ],
  force: true
)

KinoLiveViewNative.start([])
```

## Quickstart

```elixir
IO.inspect("HELLO")
```

To use the KinoLiveViewNative project we need to install it. You can include the following in your Notebook dependencies and setup section of Livebook.

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install(
  [
    {:kino_live_view_native, github: "liveview-native/kino_live_view_native"}
  ],
  config: [
    # This must be a compile time configuration for :live_view_native.
    live_view_native: [plugins: [LiveViewNative.SwiftUi]]
  ]
)

KinoLiveViewNative.start([])
```

We need to start the server. This could be hidden in in notebook dependencies to make the experience more streamlined for your reader.

<!-- livebook:{"force_markdown":true} -->

```elixir
KinoLiveViewNative.start()
```

You may optionally configure the `port` to start the server on. By default, the server starts on port `4000`.

<!-- livebook:{"force_markdown":true} -->

```elixir
KinoLiveViewNative.start(port: 5001)
```

Let's create a basic LiveView that will be available at http://localhost:4000.

```elixir

```

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib21lTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtmb3JtYXQ6IDpzd2lmdHVpfSA9IGFzc2lnbnMpIGRvXG4gICAgflNXSUZUVUlcIlwiXCJcbiAgICA8VGV4dD5IZWxsbyBmcm9tIExpdmVWaWV3IE5hdGl2ZSE8L1RleHQ+XG4gICAgXCJcIlwiXG4gIGVuZFxuXG4gIGRlZiByZW5kZXIoYXNzaWducykgZG9cbiAgICB+SFwiXCJcIlxuICAgIDxwPkhlbGxvIGZyb20gTGl2ZVZpZXchPC9wPlxuICAgIFwiXCJcIlxuICBlbmRcbmVuZCIsInBhdGgiOiIvIn0","chunks":[[0,109],[111,303],[416,45],[463,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{format: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>Hello from LiveView Native!</Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p>Hello from LiveView!</p>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib21lTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcbiAgXG4gIEBpbXBsIHRydWVcbiAgZGVmIHJlbmRlcigle3BsYXRmb3JtX2lkOiA6c3dpZnR1aX0gPSBhc3NpZ25zKSBkb1xuICAgIElPLmluc3BlY3QoXCJSRU5ESU5HIE5BVElWRVwiKVxuICAgIH5TV0lGVFVJXCJcIlwiXG4gICAgPFRleHQ+SGVsbG8gTmF0aXZlITwvVGV4dD5cbiAgICBcIlwiXCJcbiAgZW5kXG5cbiAgZGVmIHJlbmRlcigle2Zvcm1hdDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICBJTy5pbnNwZWN0KFwiUkVORElORyBOQVRJVkVcIilcbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxUZXh0PkhlbGxvIE5hdGl2ZSE8L1RleHQ+XG4gICAgXCJcIlwiXG4gIGVuZFxuXG4gIFxuICBkZWYgcmVuZGVyKGFzc2lnbnMpIGRvXG4gICAgSU8uaW5zcGVjdChhc3NpZ25zWzpmb3JtYXRdLCBsYWJlbDogXCJGT1JNQVRcIiwgbGltaXQ6IDppbmZpbml0eSlcbiAgICBJTy5pbnNwZWN0KGFzc2lnbnNbOnBsYXRmb3JtX2lkXSwgbGFiZWw6IFwiUExBVEZPUk0gSURcIiwgbGltaXQ6IDppbmZpbml0eSlcbiAgICBJTy5pbnNwZWN0KFwiUkVORElORyBXRUJcIilcbiAgICB+SFwiXCJcIlxuICAgIDxwPkhlbGxvIFdlYiE8L3A+XG4gICAgXCJcIlwiXG4gIGVuZFxuZW5kIiwicGF0aCI6Ii8ifQ","chunks":[[0,109],[111,640],[753,45],[800,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    IO.inspect("RENDING NATIVE")

    ~SWIFTUI"""
    <Text>Hello Native!</Text>
    """
  end

  def render(%{format: :swiftui} = assigns) do
    IO.inspect("RENDING NATIVE")

    ~SWIFTUI"""
    <Text>Hello Native!</Text>
    """
  end

  def render(assigns) do
    IO.inspect(assigns[:format], label: "FORMAT", limit: :infinity)
    IO.inspect(assigns[:platform_id], label: "PLATFORM ID", limit: :infinity)
    IO.inspect("RENDING WEB")

    ~H"""
    <p>Hello Web!</p>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

`KinoLiveViewNative` uses automatic code reloading, so anytime you change this file or evaluate one of the `LiveView Native` smart cells, the server will hot reload the page.

Evaluate the cell below that gives our Hello World app some colored text to see the app live reload.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib21lTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtwbGF0Zm9ybV9pZDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxUZXh0IG1vZGlmaWVycz17QG5hdGl2ZSB8PiBmb3JlZ3JvdW5kX3N0eWxlKHByaW1hcnk6IHs6Y29sb3IsIDpwdXJwbGV9KX0+XG4gICAgICBIZWxsbyBmcm9tIExpdmVWaWV3IE5hdGl2ZSFcbiAgICA8L1RleHQ+XG4gICAgXCJcIlwiXG4gIGVuZFxuXG4gIGRlZiByZW5kZXIoYXNzaWducykgZG9cbiAgICB+SFwiXCJcIlxuICAgIDxwIHN0eWxlPVwiY29sb3I6IHB1cnBsZVwiPkhlbGxvIGZyb20gTGl2ZVZpZXchPC9wPlxuICAgIFwiXCJcIlxuICBlbmRcbmVuZFxuIiwicGF0aCI6Ii8ifQ","chunks":[[0,109],[111,411],[524,45],[571,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text modifiers={@native |> foreground_style(primary: {:color, :purple})}>
      Hello from LiveView Native!
    </Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p style="color: purple">Hello from LiveView!</p>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

Now let's add some variables.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib21lTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiBtb3VudChfLCBfLCBzb2NrZXQpIGRvXG4gICAgezpvayxcbiAgICBzb2NrZXRcbiAgICB8PiBhc3NpZ24obmFtZTogXCJCcm9va2xpblwiKSB9XG4gIGVuZFxuXG4gIEBpbXBsIHRydWVcbiAgZGVmIHJlbmRlcigle3BsYXRmb3JtX2lkOiA6c3dpZnR1aX0gPSBhc3NpZ25zKSBkb1xuICAgIH5TV0lGVFVJXCJcIlwiXG4gICAgPFRleHQgbW9kaWZpZXJzPXtAbmF0aXZlIHw+IGZvcmVncm91bmRfc3R5bGUocHJpbWFyeTogezpjb2xvciwgOnB1cnBsZX0pfT5cbiAgICAgIEhpIHRoZXJlLCBJJ20gPCU9IEBuYW1lICU+XG4gICAgPC9UZXh0PlxuICAgIFwiXCJcIlxuICBlbmRcblxuICBkZWYgcmVuZGVyKGFzc2lnbnMpIGRvXG4gICAgfkhcIlwiXCJcbiAgICA8cCBzdHlsZT1cImNvbG9yOiBwdXJwbGVcIj5cbiAgICBIaSB0aGVyZSwgSSdtIDwlPSBAbmFtZSAlPlxuICAgIDwvcD5cbiAgICBcIlwiXCJcbiAgZW5kXG5lbmRcbiIsInBhdGgiOiIvIn0","chunks":[[0,109],[111,530],[643,45],[690,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def mount(_, _, socket) do
    {:ok,
     socket
     |> assign(name: "Brooklin")}
  end

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text modifiers={@native |> foreground_style(primary: {:color, :purple})}>
      Hi there, I'm <%= @name %>
    </Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p style="color: purple">
    Hi there, I'm <%= @name %>
    </p>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

## Dealing with path variables

KinoLiveViewNative lets you set path variables using the `:path_variable` syntax you would normally use in a Phoenix router. Here's an example that uses the path variable to display a name in the hello world application.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5IZWxsb05hbWVMaXZlIGRvXG4gIHVzZSBQaG9lbml4LkxpdmVWaWV3XG4gIHVzZSBMaXZlVmlld05hdGl2ZS5MaXZlVmlld1xuXG4gIEBpbXBsIHRydWVcbiAgZGVmIG1vdW50KCV7XCJuYW1lXCIgPT4gbmFtZX0sIF9zZXNzaW9uLCBzb2NrZXQpIGRvXG4gICAgezpvaywgXG4gICAgc29ja2V0XG4gICAgfD4gYXNzaWduKG5hbWU6IG5hbWUpfVxuICBlbmRcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtwbGF0Zm9ybV9pZDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxUZXh0IG1vZGlmaWVycz17QG5hdGl2ZSB8PiBmb3JlZ3JvdW5kX3N0eWxlKHByaW1hcnk6IHs6Y29sb3IsIDpwdXJwbGV9KX0+XG4gICAgICBIaSB0aGVyZSwgSSdtIDwlPSBAbmFtZSAlPlxuICAgIDwvVGV4dD5cbiAgICBcIlwiXCJcbiAgZW5kXG5cbiAgZGVmIHJlbmRlcihhc3NpZ25zKSBkb1xuICAgIH5IXCJcIlwiXG4gICAgPHAgc3R5bGU9XCJjb2xvcjogcHVycGxlXCI+XG4gICAgSGkgdGhlcmUsIEknbSA8JT0gQG5hbWUgJT5cbiAgICA8L3A+XG4gICAgXCJcIlwiXG4gIGVuZFxuZW5kXG4iLCJwYXRoIjoiL2hlbGxvLzpuYW1lIn0","chunks":[[0,109],[111,552],[665,56],[723,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HelloNameLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def mount(%{"name" => name}, _session, socket) do
    {:ok,
     socket
     |> assign(name: name)}
  end

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text modifiers={@native |> foreground_style(primary: {:color, :purple})}>
      Hi there, I'm <%= @name %>
    </Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p style="color: purple">
    Hi there, I'm <%= @name %>
    </p>
    """
  end
end
|> KinoLiveViewNative.register("/hello/:name", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

Go to http://localhost:4000/hello/your_name. Replace `your_name` with your name and see the page display your name!

## Image

The URL for the LiveView Native The SwiftUI `Image` element is evaluated relative to the LiveView's host URL. We have provided an example image at http://localhost:4000/images/logo.png for you to use in any examples.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib21lTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtwbGF0Zm9ybV9pZDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxBc3luY0ltYWdlIHVybD1cIi4vaW1hZ2VzL2xvZ28ucG5nXCIvPlxuICAgIFwiXCJcIlxuICBlbmRcblxuICBkZWYgcmVuZGVyKGFzc2lnbnMpIGRvXG4gICAgfkhcIlwiXCJcbiAgICA8aW1nIHNyYz1cIi4vaW1hZ2VzL2xvZ28ucG5nXCIvPlxuICAgIFwiXCJcIlxuICBlbmRcbmVuZCIsInBhdGgiOiIvIn0","chunks":[[0,109],[111,308],[421,45],[468,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <AsyncImage url="./images/logo.png"/>
    """
  end

  def render(assigns) do
    ~H"""
    <img src="./images/logo.png"/>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

This is the same as providing the full host url. The following example will also work.

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlci5Ib21lTGl2ZSBkb1xuICB1c2UgUGhvZW5peC5MaXZlVmlld1xuICB1c2UgTGl2ZVZpZXdOYXRpdmUuTGl2ZVZpZXdcblxuICBAaW1wbCB0cnVlXG4gIGRlZiByZW5kZXIoJXtwbGF0Zm9ybV9pZDogOnN3aWZ0dWl9ID0gYXNzaWducykgZG9cbiAgICB+U1dJRlRVSVwiXCJcIlxuICAgIDxBc3luY0ltYWdlIHVybD1cImh0dHA6Ly9sb2NhbGhvc3Q6NDAwMC9pbWFnZXMvbG9nby5wbmdcIi8+XG4gICAgXCJcIlwiXG4gIGVuZFxuXG4gIGRlZiByZW5kZXIoYXNzaWducykgZG9cbiAgICB+SFwiXCJcIlxuICAgIDxpbWcgc3JjPVwiLi9pbWFnZXMvbG9nby5wbmdcIi8+XG4gICAgXCJcIlwiXG4gIGVuZFxuZW5kIiwicGF0aCI6Ii8ifQ","chunks":[[0,109],[111,328],[441,45],[488,63]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule Server.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <AsyncImage url="http://localhost:4000/images/logo.png"/>
    """
  end

  def render(assigns) do
    ~H"""
    <img src="./images/logo.png"/>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
import Kernel
:ok
```

However, it's generally better to use the relative path without the host name because it will work in both development and production.
